{"_id":"amqp","_rev":"106-00a704be13b17be2b0681000648aa166","name":"amqp","description":"AMQP driver for node","dist-tags":{"latest":"0.2.7"},"versions":{"0.0.2":{"name":"amqp","version":"0.0.2","description":"amqp bindings for RabbitMQ","author":{"name":"Ryan Dahl"},"main":"./amqp","_id":"amqp@0.0.2","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://registry.npmjs.org/amqp/-/amqp-0.0.2.tgz","shasum":"e92032296b8310f359225689b7fbff07c69cc467","integrity":"sha512-uAul3/qNU75wMoIdTCSN2HOB3D5RvGmjj/p/8h0wIFGiCNOasNo/LZ/L6IeDKdHND1E+a4mR4JqBbnEHU0fcVQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCeeb1or21xZnZ2DFW8ptlmAjmhYZ+rt3GKQZbEyBeTPQIhAMbiQqICXKZHRgvLugiSAVvV9nFMpGD0U3Y5cGgfvnTB"}]},"directories":{}},"0.0.2-squaremo01.184010":{"name":"amqp","version":"0.0.2-squaremo01.184010","description":"amqp bindings for RabbitMQ","author":{"name":"Ryan Dahl"},"main":"./amqp","_id":"amqp@0.0.2-squaremo01.184010","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"https://registry.npmjs.org/amqp/-/amqp-0.0.2-squaremo01.184010.tgz","shasum":"4eaf0e7e7f4b4dbbd1b804249b70ee750d2de806","integrity":"sha512-FnZtgrxq86szc2X0hHrHoBxHdqgTrHlff4FlO6RtW7SpHN5MBnGSPtOKZfBvc3LEbBQR+gtXoGeCsgt3u36HAw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQConP6tn5FkYoMUpEjREKTCtBM4GuVSXro2eoG+B+XzIwIhAIZ/zaUIwIYgF63JXGPKzdSoPPS/sd8M+33C/Zb0iNSI"}]},"directories":{}},"0.0.6":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.0.6","preferGlobal":true,"author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.5"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{},"devDependencies":{},"_id":"amqp@0.0.6","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.5-pre","_defaultsLoaded":true,"dist":{"shasum":"47618a88756cccce2ab49e80f258af9630be2293","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.0.6.tgz","integrity":"sha512-/fcVq7QTjf9vUPxMzwzoKOCadmwF90Be63gP1BgEKsd+OxN/OLaZKAwKnP2VEVgcZx0WMb/ZINHR4eCGszMw5A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGtFlt1yAQZ4N9LvWhXerAHd9XDkKvWcWWMWx+RViVVNAiARi7QDm+wVNth/4FxLNJ/pRz2bkR6HTFCYLfgA0i4HKQ=="}]},"scripts":{},"directories":{}},"0.0.7":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.0.7","preferGlobal":true,"author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.5"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{},"devDependencies":{},"_id":"amqp@0.0.7","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.5-pre","_defaultsLoaded":true,"dist":{"shasum":"3c86069872befffa5d8477a308d5e96fb83d2310","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.0.7.tgz","integrity":"sha512-2ohD+8KmmWciOvseJcUiwL5NA6Inf+qeUL4o02NHHx80kGRLrBzOUjmXfhlpYPdldGIyIBIp20lXZ6sRxeGpWA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG39DcMyPeqPzKVZJ2c/kCpKTtmbFQPnpg+RSHQf2yW9AiAOvf/srrEOg7JOxF3xHUvY7W5BiljaOwF4cckRhTvyhg=="}]},"scripts":{},"directories":{}},"0.1.0":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.1.0","preferGlobal":true,"author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.5"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{},"devDependencies":{},"_id":"amqp@0.1.0","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.5-pre","_defaultsLoaded":true,"dist":{"shasum":"2a7717252f1bac92ffc8d44c49badc64b12b9719","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.1.0.tgz","integrity":"sha512-FPQRr0jXXuUNUAyP+DhJkRW0Jsa8wyirVSXINvASaTAYlu3SfoU2rUKS0up1Q2aQe++jHEeHRKggljYxsXfQSw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDSotWZvWNMAqFRSdT/vAiSBPLILSRCcsBdZ28sxMpfHwIgXup7PPUf84CXw7DNTBw9V4Fjszr/e/n81mV8yK1F0eU="}]},"scripts":{},"directories":{}},"0.1.1":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.1.1","preferGlobal":true,"author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.5 || 0.6"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"_id":"amqp@0.1.1","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.5.9-pre","_defaultsLoaded":true,"dist":{"shasum":"06c22703fc8dddb40478c6f3b553f6b55cc2f71a","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.1.1.tgz","integrity":"sha512-+gSie/tEjN56w0iTHiOk3U/UI9mqfniEvofqX+XGKs6VgifHixia5uNuw9fgMrwSs7YKSk8TAoJOkBaUErtWBA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCI0g3pL1oOZgCSeFTk6HqwuZA99UNlU59YXgsFH3TxugIgDsmTd2XC+Hr9MNolAX6F28Y9xDlxSVVPdPWYOwdrc8g="}]},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.1.2":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.1.2","preferGlobal":true,"author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.5 || 0.6"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"_id":"amqp@0.1.2","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.5.9-pre","_defaultsLoaded":true,"dist":{"shasum":"d5bfa2bdad1fd6f59990d6aeab162637f5d32058","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.1.2.tgz","integrity":"sha512-ner2tNlEPia5d+ARYegTJDMLtzni89BLQuhlC2Bwh7/3iaHGaJI1kOkrP08JkUgPu9RBOGpDu4S65yurAnaXBg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAgfoo6/TxCsTD16mO6r0X5IFmvCGeZfhlQrh6ELsuk9AiEAnMSTkEbgTnUoGEfsrwMnSH9x0SarCXz8IEYQqHUNmBU="}]},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.1.3":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.1.3","preferGlobal":true,"author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.5 || 0.6"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"_id":"amqp@0.1.3","dependencies":{},"devDependencies":{},"_engineSupported":false,"_npmVersion":"1.1.0-beta-7","_nodeVersion":"v0.7.0-pre","_defaultsLoaded":true,"dist":{"shasum":"af812565b40f0b515001986483849b3642f07d74","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.1.3.tgz","integrity":"sha512-OFBs6X4NE/EtXMybeaiV5wUvvmNTSkd7gCmPoYike0Md1+eSglqAqCzUePmusfMG64jYg+4f1s7aWzoOqgznFw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC2GblzUuNDxymtj2XQqA5K0HOe6V4t+bOgBjTuRcYKxwIgMAf+MMYJd8KdYCjQbbT4WMu6QvBZWWZ0k47ORQ5lYpo="}]},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.1.4":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.1.4","preferGlobal":true,"author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.5 || 0.6 || 0.8"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"_id":"amqp@0.1.4","dist":{"shasum":"cccac354bbd97ed339a3dbc0b250dfc07a770fca","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.1.4.tgz","integrity":"sha512-Urx1CGZHZGe6Il1Nm9tptR8zS0B2N/Y6AYSF0zCjZKMkQJN4juVjbe+I4TKL7/dJAnGX3PEYlTj0Bmhdx5iqeg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAOMEuVAgidz1Q9u1R501Ii49LM4dLkxKvQy5hKnUz6zAiBmvCVdbsPojgDeVX289GsZAD/iJCg8p66akTurJsUyNg=="}]},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.1.6":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.1.6","preferGlobal":true,"author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.5 || 0.6 || 0.8"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"_id":"amqp@0.1.6","dist":{"shasum":"5d37b0a0c88d0c8208afab6d6793cc501d44140e","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.1.6.tgz","integrity":"sha512-f+COsVWPp/iGcGDSwSH+n6SUJvRU/Cty9dk/HwN4oasrVhW2QRK/kIFllnfwxvWkUOErGXGtaasc9QM5ckbPLg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB3MhKsVyjRAgHSJfteeKzd7PGu6pkdEDvAU05GbsdqwAiEAiHPUyqJCpAcAaS3MZuJWnGmgrgAkJhIQyOrmYT8RwUE="}]},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.1.7":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.1.7","author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.5 || 0.6 || 0.8 || 0.9 || 0.10"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"_id":"amqp@0.1.7","dist":{"shasum":"2c8a67da228fb97471e46d880eb9d37be24736eb","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.1.7.tgz","integrity":"sha512-n3/XJtxosqP/IwynYIe/0sMJQylbmMIDRmgs/bD3tYrRwXUoyfhujI++p3cXRVC48JZ1eDaAxcBInwoCnghZMQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDyJeLFHguSg5xDBjnGpk15TBR3Tp6TlcgGseozMhA+NQIhAIoeid9JEJXYYbL42wogD6OY+1Yk0vn6zscCMJXcLUYN"}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.1.8":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.1.8","author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.6 || 0.8 || 0.9 || 0.10"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{"lodash":"~1.3.1","longjohn":"~0.2.1"},"devDependencies":{"optimist":"~0.6.0"},"_id":"amqp@0.1.8","dist":{"shasum":"8fe1f68a21d2558036e126d5229c22da6e20c384","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.1.8.tgz","integrity":"sha512-vPPU2uRb4nLwp5lYiZbo1dqCvKOjfz3+YEa9SDRuM6+Ra+S9S5EM6mBfp8iVZxYpdmnBCHKKJ6zcSvP+cHbQwQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDcaRSS8gk1PrGaTVq2UE9XMW0E+TO7o7l+R0AozExbCwIhANDMhQlJCosaxgJw1R7/pP+io27ILQqXYm0ViF3droAS"}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.2.0":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.2.0","author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"},{"name":"Carl Hörberg"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.6 || 0.8 || 0.9 || 0.10 || 0.11"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{"lodash":"~1.3.1"},"devDependencies":{"optimist":"~0.6.0","longjohn":"~0.2.1"},"scripts":{"test":"make test"},"_id":"amqp@0.2.0","dist":{"shasum":"caed3d5a1ef5f419663f80dcf6e95312e5fca2ca","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.2.0.tgz","integrity":"sha512-TgFdnu9n3kyqXdsvU+Ugxznxko9Gvemi2Nj66Be/0J+uR62ZKB962fjaLcM2kiG0m2MdIfWMhXf2t5M5AG4khA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD+da9oHF2WvO8nM97VNnH9fk8uUCz6tBwXYNhxRyhSiwIgT/UQFsZuBpF9J5nzW5G4fQ/pkXbMgqbtEs9Vtw1hWhk="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.2.3":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.2.3","author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"},{"name":"Carl Hörberg"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.6 || 0.8 || 0.9 || 0.10 || 0.11"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{"lodash":"~1.3.1"},"devDependencies":{"optimist":"~0.6.0","longjohn":"~0.2.1"},"scripts":{"test":"make test"},"homepage":"https://github.com/postwait/node-amqp","_id":"amqp@0.2.3","dist":{"shasum":"25afbd851ad784f8e606f22bfe34c5f83e4fe75c","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.2.3.tgz","integrity":"sha512-Utucx9Rxllrj6LsKGqYBBaWleapIUU8RCHD49JxE/uJbkXnz7uisfmOgvqn95umP45GBwg3ixbeA4mxtc5E3SA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCheWIl9Y1bCXbFuIAcggnyU9evyTnzlobQg52FBIWHfgIhAJVB04Qb4Rr5x7Drmnfcx1VJs4MdfKZ6oZBGiyKFlGEH"}]},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.2.4":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.2.4","author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"},{"name":"Carl Hörberg"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","engines":{"node":"0.4 || 0.6 || 0.8 || 0.9 || 0.10 || 0.11 || 0.12"},"licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{"lodash":"~1.3.1"},"devDependencies":{"optimist":"~0.6.0","longjohn":"~0.2.1"},"scripts":{"test":"make test"},"homepage":"https://github.com/postwait/node-amqp","_id":"amqp@0.2.4","dist":{"shasum":"b47e9f5b01f292ab18a8097ff0e72a54b4d03a89","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.2.4.tgz","integrity":"sha512-IzQ1mB35jAeUfXyPcRoyCkMelGe8f/wMCO81RZCJrG2OiF7557yFtAgZO2k24pe2Q93YM6E/60eWbqzmy55kQQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDhp9kfWwTrRf9aU0j5+19ru0XSvfsnwP+3wg6S4BlQawIgLshiIVUB3FQz7mJ774SQMflJI/Gk/GhPEIb7V5gYqPM="}]},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"directories":{}},"0.2.5":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.2.5","author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"},{"name":"Carl Hörberg"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{"lodash":"~1.3.1"},"devDependencies":{"optimist":"~0.6.0","longjohn":"~0.2.1"},"scripts":{"test":"make test"},"gitHead":"95f4c0c2904799c3e62c7169879a608c753fdb6a","homepage":"https://github.com/postwait/node-amqp#readme","_id":"amqp@0.2.5","_shasum":"92d4422ae266d655276cd3787bb50e914514dba3","_from":".","_npmVersion":"2.15.1","_nodeVersion":"4.4.4","_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"dist":{"shasum":"92d4422ae266d655276cd3787bb50e914514dba3","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.2.5.tgz","integrity":"sha512-ZBRmhM2CYntrUk+lS7TCtoXd4hGZJM+VyUAlZil1oJ9P91yOg7nddBieOmT7MAw1eN6qJsk7uWGLPvxUH14MtQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC0FVg4qwPqirAgRwiMdLQTA8wcg4UbMJrnjcTGwO3XGAiBMmOHhkNAlPIt+LdGjLwiiskvuMCqUizB8vD3O7LDp2Q=="}]},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/amqp-0.2.5.tgz_1464961185754_0.6045972865540534"},"directories":{}},"0.2.6":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.2.6","author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"},{"name":"Carl Hörberg"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{"lodash":"^4.0.0"},"devDependencies":{"optimist":"~0.6.0","longjohn":"~0.2.1"},"scripts":{"test":"make test"},"gitHead":"1d30ce178d4a1781f2199f136e4e942e725cfa4c","homepage":"https://github.com/postwait/node-amqp#readme","_id":"amqp@0.2.6","_shasum":"d97fee5143026fa0b4fd6a5d56485f0448eb37ca","_from":".","_npmVersion":"2.15.1","_nodeVersion":"4.4.4","_npmUser":{"name":"postwait","email":"jesus@omniti.com"},"maintainers":[{"name":"ry","email":"ry@tinyclouds.org"},{"name":"postwait","email":"jesus@omniti.com"}],"dist":{"shasum":"d97fee5143026fa0b4fd6a5d56485f0448eb37ca","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.2.6.tgz","integrity":"sha512-blaJY7Oi63iD+ox8+kTnaBOrnPbmG33kQqLMOPL2TYaBP/64ArDIB6RuWx2OZE88sIEtiFJgYpc77rwSu4USVA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCHyA3PZHLFwaYeXOO1znM28tmQRYBY1Qmz4lNELDge6cCIQC9ObkRJrx/kQHI5K0eUTZMEnAp8AqOcda6JkJFi2ZtXw=="}]},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/amqp-0.2.6.tgz_1464961216906_0.558480013627559"},"directories":{}},"0.2.7":{"name":"amqp","description":"AMQP driver for node","keywords":["amqp"],"version":"0.2.7","author":{"name":"Ryan Dahl"},"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"},{"name":"Carl Hörberg"}],"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"main":"./amqp","licenses":[{"type":"MIT","url":"http://github.com/postwait/node-amqp/raw/master/LICENSE-MIT"}],"dependencies":{"lodash":"^4.0.0"},"devDependencies":{"optimist":"~0.6.0","longjohn":"~0.2.1"},"scripts":{"test":"make test"},"gitHead":"875497279dfbe2985a60b6c64511b7cdcefda8ee","homepage":"https://github.com/postwait/node-amqp#readme","_id":"amqp@0.2.7","_shasum":"738cfc45fd9c99260b45d5fafc32ed000841e1b1","_from":".","_npmVersion":"2.15.5","_nodeVersion":"4.4.5","_npmUser":{"name":"postwait","email":"jesus@lethargy.org"},"dist":{"shasum":"738cfc45fd9c99260b45d5fafc32ed000841e1b1","tarball":"https://registry.npmjs.org/amqp/-/amqp-0.2.7.tgz","fileCount":92,"unpackedSize":506202,"integrity":"sha512-AtXW9QEhSf2diJHn4Fmeo9Zdb1LMyEer6dUCOxzjEb7Fxh3CBgad3nmB8LTXDYsDRbdRfHruGCFYG7T+4qilww==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCBaz5LpAnAeH+hc/vold++3ybCh/GLNQgk4JGHm+VvNgIhAKurco4qe/HcdMgp1dXvOFkY5GZ1Kg6I8j1KWWQqBvh/"}]},"maintainers":[{"name":"postwait","email":"jesus@omniti.com"},{"name":"ry","email":"ry@tinyclouds.org"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/amqp_0.2.7_1531347233068_0.9008664725825422"},"_hasShrinkwrap":false}},"maintainers":[{"name":"postwait","email":"jesus@omniti.com"},{"name":"ry","email":"ry@tinyclouds.org"}],"author":{"name":"Ryan Dahl"},"time":{"modified":"2023-02-12T08:12:14.602Z","created":"2011-05-26T17:36:58.769Z","0.0.1":"2011-05-26T17:36:58.769Z","0.0.2":"2011-05-26T17:36:58.769Z","0.0.2-squaremo01.184010":"2011-05-26T17:36:58.769Z","0.0.6":"2011-05-26T17:38:23.766Z","0.0.7":"2011-06-02T21:41:24.522Z","0.1.0":"2011-07-30T13:48:49.682Z","0.1.1":"2011-11-09T10:13:16.126Z","0.1.2":"2012-02-03T21:06:40.789Z","0.1.3":"2012-04-17T13:35:29.358Z","0.1.4":"2012-10-05T01:20:30.154Z","0.1.6":"2013-03-07T13:59:48.150Z","0.1.7":"2013-06-02T17:19:00.158Z","0.1.8":"2013-11-27T04:23:59.659Z","0.2.0":"2014-03-18T12:00:13.153Z","0.2.3":"2015-02-11T18:16:00.232Z","0.2.4":"2015-03-04T00:26:04.154Z","0.2.5":"2016-06-03T13:39:47.256Z","0.2.6":"2016-06-03T13:40:18.370Z","0.2.7":"2018-07-11T22:13:53.180Z"},"repository":{"type":"git","url":"git://github.com/postwait/node-amqp.git"},"users":{"fgribreau":true,"bluerival":true,"oroce":true,"josiah":true,"racingcow":true,"anilcs0405":true,"barringtonhaynes":true,"henryfour":true,"oneminute":true,"hansamann":true,"intellinote":true,"jurgis":true,"mjurincic":true,"sloanb":true,"yasinaydin":true,"ftornik":true,"karrdy":true,"deryk":true,"wzbg":true,"pensierinmusica":true,"mikepol":true,"aitorllj93":true,"jesusgoku":true,"gamingcoder":true,"shox":true,"poppowerlb2":true,"phgyorgygulyas":true,"coolhanddev":true,"sunggun":true,"rickyrattlesnake":true,"ma-ha":true,"456wyc":true,"hcontreras":true,"hurerera":true,"icerainnuaa":true,"monczek":true,"morogasper":true,"barenko":true,"ajsb85":true,"itonyyo":true,"cydrabbit":true,"luhalvesbr":true},"readme":"[![build status](https://secure.travis-ci.org/postwait/node-amqp.png)](http://travis-ci.org/postwait/node-amqp)\n\n# node-amqp\n\nThis is a client for RabbitMQ (and maybe other servers?). It partially\nimplements the 0.9.1 version of the AMQP protocol.\n\n## Table of Contents \n\n- [Installation](#installation)\n- [Synopsis](#synopsis)\n- [Connection](#connection)\n  - [Connection options and URL](#connection-options-and-url)\n  - [connection.publish(routingKey, body, options, callback)](#connectionpublishroutingkey-body-options-callback)\n  - [connection.disconnect()](#connectiondisconnect)\n  - [connection.on('tag.change', callback)](#connectionontagchange-callback)\n- [Queue](#queue)\n  - [connection.queue(name[, options][, openCallback])](#connectionqueuename-options-opencallback)\n  - [queue.subscribe([options,] listener)](#queuesubscribeoptions-listener)\n  - [queue.subscribeRaw([options,] listener)](#queuesubscriberawoptions-listener)\n  - [queue.unsubscribe(consumerTag)](#queueunsubscribeconsumertag)\n  - [queue.shift([reject[, requeue]])](#queueshiftreject-requeue)\n  - [queue.bind([exchange,] routing)](#queuebindexchange-routing-callback)\n  - [queue.unbind([exchange,] routing)](#queueunbindexchange-routing)\n  - [queue.bind_headers([exchange,] routing)](#queuebind_headersexchange-routing)\n  - [queue.destroy(options)](#queuedestroyoptions)\n- [Exchange](#exchange)\n  - [exchange.on('open', callback)](#exchangeonopen-callback)\n  - [connection.exchange()](#connectionexchange)\n  - [connection.exchange(name, options={}, openCallback)](#connectionexchangename-options-opencallback)\n  - [exchange.publish(routingKey, message, options, callback)](#exchangepublishroutingkey-message-options-callback)\n  - [exchange.destroy(ifUnused = true)](#exchangedestroyifunused--true)\n  - [exchange.bind(srcExchange, routingKey [, callback])](#exchangebindsrcexchange-routingkey--callback)\n  - [exchange.unbind(srcExchange, routingKey [, callback])](#exchangeunbindsrcexchange-routingkey--callback)\n  - [exchange.bind_headers(exchange, routing [, bindCallback])](#exchangebind_headersexchange-routing--bindcallback)\n\n## Installation\n\n    npm install amqp\n\n## Synopsis\n\nIMPORTANT: This module only works with node v0.4.0 and later.\n\nAn example of connecting to a server and listening on a queue.\n\n```javascript\nvar amqp = require('amqp');\n\nvar connection = amqp.createConnection({ host: 'dev.rabbitmq.com' });\n\n// add this for better debuging\nconnection.on('error', function(e) {\n  console.log(\"Error from amqp: \", e);\n});\n\n// Wait for connection to become established.\nconnection.on('ready', function () {\n  // Use the default 'amq.topic' exchange\n  connection.queue('my-queue', function (q) {\n      // Catch all messages\n      q.bind('#');\n    \n      // Receive messages\n      q.subscribe(function (message) {\n        // Print messages to stdout\n        console.log(message);\n      });\n  });\n});\n```\n\n## Connection\n\n`new amqp.Connection()` Instantiates a new connection. Use\n`connection.connect()` to connect to a server.\n\n`amqp.createConnection()` returns an instance of `amqp.Connection`, which contains\nan instance of `net.Socket` at its `socket` property. All events and methods which work on\n`net.Socket` can also be used on an `amqp.Connection` instance. (e.g., the\nevents `'connect'` and `'close'`.)\n\n### Connection options and URL\n\n`amqp.createConnection([options, [implOptions]])` takes two options\nobjects as parameters.  The first options object has these defaults:\n\n    { host: 'localhost'\n    , port: 5672\n    , login: 'guest'\n    , password: 'guest'\n    , connectionTimeout: 10000\n    , authMechanism: 'AMQPLAIN'\n    , vhost: '/'\n    , noDelay: true\n    , ssl: { enabled : false\n           }\n    }\n\nAn example `options` object for creating an SSL connection has these properties:\n\n    { host: 'localhost'\n    , port: 5671\n    , login: 'guest'\n    , password: 'guest'\n    , authMechanism: 'AMQPLAIN'\n    , vhost: '/'\n    , ssl: { enabled : true\n           , keyFile : '/path/to/key/file'\n           , certFile : '/path/to/cert/file'\n           , caFile : '/path/to/cacert/file'\n           , rejectUnauthorized : true\n           }\n    }\n\nThe key, certificate, and certificate authority files must be in pem format.\nAlternatively, `pfxFile` can be used to read key and certificate from a single\nfile. If `port` is not specified, the default AMQPS port 5671 is used.\nIf `rejectUnauthorized` is not specified, it defaults to true.\n\nOptions can also be passed in a single URL of the form\n\n    amqp[s]://[user:password@]hostname[:port][/vhost]\n\nAMQPLAIN is assumed for the auth mechanism.\n\nNote that the vhost must be URL-encoded and appear as the only segment\nof the path, i.e., the only unencoded slash is that leading; leaving\nthe path entirely empty indicates that the vhost `/`, as\nabove, should be used (it could also be supplied as the path `/%2f`).\n\nThe `heartbeat` setting sets the heartbeat interval (in seconds) for\nthe connection.  There is no default for this option meaning no\nheartbeating is taking place.\n\nThis URL is supplied as the field `url` in the options; for example\n\n```javascript\nvar conn =\n  amqp.createConnection({url: \"amqp://guest:guest@localhost:5672\"});\n\n```\n\n\nOptions provided as individual fields will override values given in\nthe URL.\n\n\nYou can also specify additional client properties for your connection\nby setting the `clientProperties` field on the `options` object.\n\n    { clientProperties: { applicationName: 'myApplication'\n                        , capabilities: { consumer_cancel_notify: true\n                                        }\n                        }\n    }\n\nIf the `consumer_cancel_notify` capability is set to `true` (as above), then\nRabbitMQ's [Consumer Cancel Notification](http://www.rabbitmq.com/consumer-cancel.html)\nfeature will be enabled.\n\nBy default the following client properties are set\n\n    { product: 'node-amqp'\n    , platform: 'node-' + process.version\n    , version: nodeAMQPVersion\n    }\n\n\nThe second options are specific to the node AMQP implementation. It has\nthe default values:\n\n    { defaultExchangeName: ''\n    , reconnect: true\n    , reconnectBackoffStrategy: 'linear'\n    , reconnectExponentialLimit: 120000\n    , reconnectBackoffTime: 1000\n    }\n\nThe defaultExchangeName is the default exchange to which\nconnection.publish will publish. In the past, the default exchange was\n`amq.topic`, which is not ideal.  To emulate this behaviour, one can\ncreate a connection like:\n\n```javascript\nvar conn =\n  amqp.createConnection({url: \"amqp://guest:guest@localhost:5672\"},\n                        {defaultExchangeName: \"amq.topic\"});\n```\n\n If the `reconnect` option is true, then the driver will attempt to reconnect using the\n configured strategy *any time* the connection becomes unavailable.  If this is not\n appropriate for your application, set this option to false.\n\n If you would like this option, you can set parameters controlling how aggressively the\n reconnections will be attempted.  Valid strategies are \"linear\" and \"exponential\".\n\n Backoff times are in milliseconds.  Under the \"linear\" strategy, the driver will pause\n `reconnectBackoffTime` ms before the first attempt, and between each subsequent attempt.\n Under the \"exponential\" strategy, the driver will pause `reconnectBackoffTime` ms before\n the first attempt, and will double the previous pause between each subsequent attempt\n until a connection is reestablished.\n\nAfter a connection is established the `'connect'` event is fired as it is\nwith any `net.Connection` instance. AMQP requires a 7-way handshake which\nmust be completed before any communication can begin. `net.Connection` does\nthe handshake automatically and emits the `'ready'` event when the handshaking\nis complete.\n\nFor backward compatibility, two additional options are available. Older\nversions of this library placed the routingKey and deliveryTag for incoming\nmessages into the JSON payload received. This module was changed to\nleave inbound JSON payloads pristine.  Some applications may need the\nold behaviour. If the key `routingKeyInPayload` is set to true in the\nconnection `options`, the messages resulting from a subscribe call will\ninclude a 'routingKey' key in the JSON payload.  If the key\n`deliveryTagInPayload` is set to true in the connection options, the\ndeliveryTag of the incoming message will be placed in the JSON payload.\n\n\n### connection.publish(routingKey, body, options, callback)\n\nPublishes a message to the default exchange; if the defaultExchange is\nleft as `''`, this effectively publishes the message on the routing key named.\n\nThis method proxies to the default exchange's `publish` method and parameters are passed\nthrough untouched.\n\n### connection.disconnect()\n\nCleanly disconnect from the server, the socket will not be closed until the\nserver responds to the disconnection request.\n\n### connection.on('tag.change', callback)\n\nFired when an existing consumer tag has changed. Use this event to update your consumer tag references.\n\nWhen an error or reconnection occurs, any existing consumers will be automatically replaced with new ones.\nIf your application is holding onto a reference to a consumer tag (e.g. to unsubscribe later) and reconnects, \nthe held tag will no longer be valid, preventing the application from gracefully unsubscribing.\n\nThe `callback` function takes one parameter, `event`, which contains two properties: `oldConsumerTag` and `consumerTag`.\n\n```javascript\nvar connection = amqp.createConnection({ host: 'dev.rabbitmq.com' });\n\n// Local references to the exchange, queue and consumer tag\nvar _exchange = null;\nvar _queue = null;\nvar _consumerTag = null;\n\n// Report errors\nconnection.on('error', function(err) { \n    console.error('Connection error', err); \n});\n\n// Update our stored tag when it changes\nconnection.on('tag.change', function(event) {\n    if (_consumerTag === event.oldConsumerTag) {\n        _consumerTag = event.consumerTag;\n        // Consider unsubscribing from the old tag just in case it lingers\n        _queue.unsubscribe(event.oldConsumerTag);\n    }\n});\n\n// Initialize the exchange, queue and subscription\nconnection.on('ready', function() {\n    connection.exchange('exchange-name', function(exchange) {\n        _exchange = exchange;\n        \n        connection.queue('queue-name', function(queue) {\n            _queue = queue;\n            \n            // Bind to the exchange\n            queue.bind('exchange-name', 'routing-key');\n            \n            // Subscribe to the queue\n            queue\n                .subscribe(function(message) {\n                    // Handle message here\n                    console.log('Got message', message);\n                    queue.shift(false, false);\n                })\n                .addCallback(function(res) {\n                    // Hold on to the consumer tag so we can unsubscribe later\n                    _consumerTag = res.consumerTag;\n                })\n            ;\n        });\n    });\n});\n\n// Some time in the future, you'll want to unsubscribe or shutdown \nsetTimeout(function() {\n    if (_queue) {\n        _queue\n            .unsubscribe(_consumerTag)\n            .addCallback(function() {\n                // unsubscribed\n            })\n        ;\n    } else {\n        // unsubscribed\n    }\n}, 60000);\n\n```\n\n\n\n## Queue\n\nEvents: A queue will call the callback given to the `connection.queue()`\nmethod once it is usable. For example:\n\n```javascript\nvar q = connection.queue('my-queue', function (queue) {\n  console.log('Queue ' + queue.name + ' is open');\n});\n```\n\n\nDeclaring a queue with an empty name will make the server generate a\nrandom name.\n\n### connection.queue(name[, options][, openCallback])\n\nReturns a reference to a queue. The name parameter is required, unlike pika which defaults the name to `''`. The options are\n\n- `passive`: boolean, default false.\n    If set, the server will not create the queue.  The client can use\n    this to check whether a queue exists without modifying the server\n    state.\n- `durable`: boolean, default false.\n    Durable queues remain active when a server restarts.\n    Non-durable queues (transient queues) are purged if/when a\n    server restarts.  Note that durable queues do not necessarily\n    hold persistent messages, although it does not make sense to\n    send persistent messages to a transient queue.\n- `exclusive`: boolean, default false.\n    Exclusive queues may only be consumed from by the current connection.\n    Setting the 'exclusive' flag always implies 'autoDelete'.\n- `autoDelete`: boolean, default true.\n    If set, the queue is deleted when all consumers have finished\n    using it. Last consumer can be cancelled either explicitly or because\n    its channel is closed. If there was no consumer ever on the queue, it\n    won't be deleted.\n- `noDeclare`: boolean, default false.\n    If set, the queue will not be declared, this will allow a queue to be\n    deleted if you don't know its previous options.\n- `arguments`: a map of additional arguments to pass in when creating a queue.\n- `closeChannelOnUnsubscribe` : a boolean when true the channel will close on \n    unsubscribe, default false.\n\n### queue.subscribe([options,] listener)\n\nAn easy subscription command. It works like this\n\n```javascript\nq.subscribe(function (message, headers, deliveryInfo, messageObject) {\n  console.log('Got a message with routing key ' + deliveryInfo.routingKey);\n});\n    \n```\n\nIt will automatically acknowledge receipt of each message.\n\nThere are several options available.  Setting the options argument to\n`{ ack: true }` (which defaults to false) will make it so that the AMQP\nserver only delivers a single message at a time. When you want the next\nmessage, call `q.shift()`. When `ack` is false then you will receive\nmessages as fast as they come in. \n\nYou can also use the prefetchCount option to increase the window of how\nmany messages the server will send you before you need to ack (quality of service).\n`{ ack: true, prefetchCount: 1 }` is the default and will only send you one\nmessage before you ack. Setting prefetchCount to 0 will make that window unlimited.\nIf this option is used `q.shift()` should not be called. Instead the listener \nfunction should take four parameters `(message, headers, deliveryInfo, ack)` and\n`ack.acknowledge()` should be called to ack a single message.\n\nThe `routingKeyInPayload` and `deliveryKeyInPayload` options determine\nif the reception process will inject the routingKey and deliveryKey,\nrespectively, into the JSON payload received.  These default to unset\nthus adopting the parent connection's values (which default to false).\nSetting these to true provide backward compatibility for older\napplications.\n\nThe `exclusive` option will subscribe to the queue in exclusive mode. Only one\nsubscriber is allowed at a time, and subsequent attempts to subscribe to the\nsame queue will result in an exception. This option differs from the exclusive\noption passed when creating in a queue in that the queue itself is not exclusive,\nonly the consumers. This means that long lived durable queues can be used\nas exclusive queues.\n\nThe `messageObject` can be used to acknowledge a given message using: \n```javascript\nmessageObject.acknowledge(false); // use true if you want to acknowledge all previous messages of the queue\n``` \nIf the `consumer_cancel_notify` capability was enabled when the connection was\ncreated, the queue will emit `basicCancel` upon receiving a consumer cancel\nnotification from the server.  The queue's channel will be automatically closed.\nIn a clustered environment, developers may want to consider automatically\nre-subscribing to the queue on this event.\n\nThis method will emit `'basicQosOk'` when ready.\n\n\n### queue.subscribeRaw([options,] listener)\n\nSubscribes to a queue. The `listener` argument should be a function which\nreceives a message. This is a low-level interface - the message that the\nlistener receives will be a stream of binary data. You probably want to use\n`subscribe` instead. For now this low-level interface is left undocumented.\nLook at the source code if you need to do this.\n\nThis method will emit `'basicConsumeOk'` when ready.\n\n### queue.unsubscribe(consumerTag)\n\nUnsubscribe from a queue, given the consumer tag. The consumer tag is\nsupplied to the *promise callback* of `Queue.subscribeRaw` or\n`Queue.subscribe`:\n\n```javascript\nconnection.queue('foo', function(queue) {\n  var ctag;\n  queue.subscribe(function(msg) {...})\n    .addCallback(function(ok) { ctag = ok.consumerTag; });\n  // ... and in some other callback\n  queue.unsubscribe(ctag);\n});\n```\n\nNote that `Queue.unsubscribe` will not requeue messages that have not\nbeen acknowledged. You need to close the queue or connection for that\nto happen. You may also receive messages after calling `unsubscribe`;\nyou will **not** receive messages from the queue after the unsubscribe\npromise callback has been invoked, however.\n\n### queue.shift([reject[, requeue]])\n\nFor use with `subscribe({ack: true}, fn)`. Acknowledges the last\nmessage if no arguments are provided or if `reject` is false. If\n`reject` is true then the message will be rejected and put back onto\nthe queue if `requeue` is true, otherwise it will be discarded.\n\n\n### queue.bind([exchange,] routing[, callback])\n\nThis method binds a queue to an exchange.  Until a queue is\nbound it will not receive any messages, unless they are sent through\nthe unnamed exchange (see `defaultExchangeName` above).\n\nIf the `exchange` argument is left out `'amq.topic'` will be used.\n\nThis method will emit `'queueBindOk'` when complete.\n\nIf `callback` is provided it will also be triggered when complete,\nnote that if you perform multiple bindings, only the last callback\nwill be called.\n\n\n### queue.unbind([exchange,] routing)\n\nThis method unbinds a queue from an exchange.\n\nIf the exchange argument is left out `'amq.topic'` will be used.\n\nThis method will emit `'queueUnbindOk'` when complete.\n\n\n### queue.bind_headers([exchange,] routing)\n\nThis method binds a queue to an exchange.  Until a queue is\nbound it will not receive any messages.\n\nThis method is to be used on an \"headers\"-type exchange. The routing\nargument must contain the routing keys and the `x-match` value (`all` or `any`).\n\nIf the `exchange` argument is left out `'amq.headers'` will be used.\n\n### queue.unbind_headers([exchange,] routing)\n\nThis method unbinds a queue from an exchange.  Whilst a queue is\nbound it will continue receive messages that have matching headers.\n\nThis method is to be used on an \"headers\"-type exchange. The routing\nargument must contain the routing keys and the `x-match` value (`all` or `any`).\n\nIf the `exchange` argument is left out `'amq.headers'` will be used.\n\n### queue.destroy(options)\n\nDelete the queue. Without options, the queue will be deleted even if it has\npending messages or attached consumers. If +options.ifUnused+ is true, then\nthe queue will only be deleted if there are no consumers. If\n+options.ifEmpty+ is true, the queue will only be deleted if it has no\nmessages.\n\nNote: the successful destruction of a queue will cause a consumer cancel \nnotification to be emitted (for clients who have enabled the \n`consumer_cancel_notify` option when creating the connection).\n\n\n\n## Exchange\n\nEvents: An exchange will call the callback given to the `connection.exchange()`\nmethod once it is usable. For example:\n\n```javascript\nvar exc = connection.exchange('my-exchange', function (exchange) {\n  console.log('Exchange ' + exchange.name + ' is open');\n});\n```\n\n### exchange.on('open', callback)\n\nThe open event is emitted when the exchange is declared and ready to\nbe used. This interface is considered deprecated.\n\n\n### connection.exchange()\n### connection.exchange(name, options={}, openCallback)\n\nAn exchange can be created using `connection.exchange()`. The method returns\nan `amqp.Exchange` object.\n\nWithout any arguments, this method returns the default exchange.\nOtherwise a string, `name`, is given as the first argument and an `options`\nobject for the second. The options are\n\n- `type`: the type of exchange `'direct'`, `'fanout'`, or `'topic'` (default).\n- `passive`: boolean, default false.\n    If set, the server will not create the exchange.  The client can use\n    this to check whether an exchange exists without modifying the server\n    state.\n- `durable`: boolean, default false.\n    If set when creating a new exchange, the exchange will be marked as\n    durable.  Durable exchanges remain active when a server restarts.\n    Non-durable exchanges (transient exchanges) are purged if/when a\n    server restarts.\n- `autoDelete`: boolean, default true.\n    If set, the exchange is deleted when there are no longer queues\n    bound to it.\n- `noDeclare`: boolean, default false.\n    If set, the exchange will not be declared, this will allow the exchange\n    to be deleted if you dont know its previous options.\n- `confirm`: boolean, default false.\n    If set, the exchange will be in confirm mode, and you will get a \n    'ack'|'error' event emitted on a publish, or the callback on the publish\n    will be called.\n- `arguments`: a map of additional arguments to pass in when creating an exchange.\n\nAn exchange will emit the `'open'` event when it is finally declared.\n\n\n### exchange.publish(routingKey, message, options, callback)\n\nPublishes a message to the exchange. The `routingKey` argument is a string\nwhich helps routing in `topic` and `direct` exchanges. The `message` can be\neither a Buffer or Object. A Buffer is used for sending raw bytes; an Object\nis converted to JSON.\n\n`options` is an object with any of the following\n\n- `mandatory`: boolean, default false.\n    This flag tells the server how to react if the message cannot be\n    routed to a queue.  If this flag is set, the server will return an\n    unroutable message with a Return method.  If this flag is false, the\n    server silently drops the message.\n- `immediate`: boolean, default false.\n    This flag tells the server how to react if the message cannot be\n    routed to a queue consumer immediately.  If this flag is set, the\n    server will return an undeliverable message with a Return method.\n    If this flag is false, the server will queue the message, but with\n    no guarantee that it will ever be consumed.\n- `contentType`: default `'application/octet-stream'`\n- `contentEncoding`: default null.\n- `headers`: default `{}`. Arbitrary application-specific message headers.\n- `deliveryMode`: Non-persistent (1) or persistent (2)\n- `priority`: The message priority, 0 to 9.\n- `correlationId`: string, default null. Application correlation identifier\n- `replyTo`: Usually used to name a reply queue for a request message.\n- `expiration`: default null. Message expiration specification\n- `messageId`: default null. Application message identifier\n- `timestamp`: default null. Message timestamp\n- `type`: default null. Message type name\n- `userId`: default null. Creating user id\n- `appId`: default null. Creating application id\n\n`callback` is a function that will get called if the exchange is in confirm mode,\nthe value sent will be true or false, this is the presense of a error so true, means\nan error occured and false, means the publish was successfull\n\n### exchange.destroy(ifUnused = true)\n\nDeletes an exchange.\nIf the optional boolean second argument is set, the server will only\ndelete the exchange if it has no queue bindings. If the exchange has queue\nbindings the server does not delete it but raises a channel exception\ninstead.\n\n### exchange.bind(srcExchange, routingKey [, callback])\n\nBinds the exchange (destination) to the given source exchange (srcExchange). \nWhen one exchange is bound to another, the destination (or receiving) exchange \nwill receive all messages published to the source exchange that match the \ngiven routingKey. \n\nThis method will emit `'exchangeBindOk'` when complete.\n\nPlease note that Exchange to Exchange Bindings (E2E) are an extension to the \nAMQP spec introduced by RabbitMQ, and that by using this feature, you will be \nreliant on RabbitMQ's AMQP implementation. For more information on E2E \nBindings with RabbitMQ see:\n\nhttp://www.rabbitmq.com/e2e.html\n\n### exchange.unbind(srcExchange, routingKey [, callback])\n\nUnbinds the exchange (destination) from the given source exchange (srcExchange). \nThis is the reverse of the exchange.bind method above, and will stop messages \nfrom srcExchange/routingKey from being sent to the destination exchange. \n\nThis method will emit `'exchangeUnbindOk'` when complete.\n\n### exchange.bind_headers(exchange, routing [, bindCallback])\n\nThis method is to be used on an \"headers\"-type exchange. The routing\nargument must contain the routing keys and the `x-match` value (`all` or `any`).\n","keywords":["amqp"],"contributors":[{"name":"Vasili Sviridov"},{"name":"Theo Schlossnagle"},{"name":"Vincent Desjardins"},{"name":"Liang-Chi Hsieh"},{"name":"Tim Baga"},{"name":"Stéphane Alnet"},{"name":"Alen Mujezinovic"},{"name":"Michael Bridgen"},{"name":"Chris Bond"},{"name":"Andrei Vereha"},{"name":"Mike Bardzinski"},{"name":"James Carr"},{"name":"David Barshow"},{"name":"Jason Pincin"},{"name":"Carl Hörberg"}],"bugs":{"url":"http://github.com/postwait/node-amqp/issues"},"readmeFilename":"README.md","homepage":"https://github.com/postwait/node-amqp#readme"}